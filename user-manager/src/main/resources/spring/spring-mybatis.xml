<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!-- 引入jdbc配置文件 -->
    <context:property-placeholder location="classpath*:properties/jdbc.properties"/>

    <!-- 配置数据源 -->

    <!--主数据库连接池-->
    <bean id="writeDataSource"
          class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 使用properties来配置 -->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${write.jdbc.url}"/>
        <property name="username" value="${write.jdbc.username}"/>
        <property name="password" value="${write.jdbc.password}"/>
        <!-- 最小、最大 -->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
    </bean>

    <!--主数据库连接池-->
    <bean id="readDataSource"
          class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 使用properties来配置 -->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${read.jdbc.url}"/>
        <property name="username" value="${read.jdbc.username}"/>
        <property name="password" value="${read.jdbc.password}"/>
        <!-- 最小、最大 -->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
    </bean>


    <bean id="dataSource" class="com.shop.userManager.util.ThreadLocalRountingDataSource">
        <property name="defaultTargetDataSource" ref="writeDataSource"/>
        <property name="targetDataSources">
            <map key-type="com.shop.userManager.enums.DataSources">
                <entry key="READ" value-ref="readDataSource"/>
                <entry key="WRITE" value-ref="writeDataSource"/>
            </map>
        </property>
    </bean>


    <!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置-->
    <bean id="masterSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:dao.mapping/*.xml"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
    </bean>

    <!-- Transaction-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.shop.userManager.mapper"/>
    </bean>

    <!-- 切换数据源  -->
    <bean id="dataSourceAdvice" class="com.shop.userManager.aop.DataSourceInterceptor">
        <property name="slaveMethods">
            <list>
                <value>query</value>
                <value>list</value>
                <value>load</value>
                <value>find</value>
                <value>get</value>
                <value>select</value>
                <value>count</value>
                <value>exists</value>
            </list>
        </property>
    </bean>

    <aop:aspectj-autoproxy/>
    <context:component-scan base-package="com.shop.userManager.aop"/>

</beans>
